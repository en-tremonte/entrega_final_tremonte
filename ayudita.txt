Ahora podemos agregar en views.py la siguiente funcion
```python 
from django.contrib.auth.models import User
from .forms import AvatarFormulario
@login_required
def agregarAvatar(request):
      if request.method == 'POST':
            miFormulario = AvatarFormulario(request.POST, request.FILES) #aquí mellega toda la información del html
            if miFormulario.is_valid():   #Si pasó la validación de Django
                  u = User.objects.get(username=request.user)
                  avatar = Avatar(user=u, imagen=miFormulario.cleaned_data['imagen']) 
                  avatar.save()
                  return render(request, "App1/inicio.html") #Vuelvo al inicio o a donde quieran
      else: 
            miFormulario= AvatarFormulario() #Formulario vacio para construir el html
      return render(request, "App1/agregarAvatar.html", {"miFormulario":miFormulario})
```

Creamos un archivo agregarAvatar.html con:
```html 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
    <title>Cargar Avatar</title>
</head>
<body>
    <h3>Cargar Avatar</h3>
    <form method="POST" enctype="multipart/form-data">
        {% csrf_token %}
        {{ miFormulario.as_p}}
        <input type="submit" value="Actualizar">
    </form>
</body>
</html>
```
En el urls.py agregar:
```python 
path('agregarAvatar', views.agregarAvatar, name="AgregarAvatar"), 
```

Ir a para deslogearse: http://localhost:8000/App1/logout

Volver a ir a: http://localhost:8000/App1/

Logearse con otro user: david_j, pwd= david9.25.38 

Ir a: http://localhost:8000/App1/agregarAvatar 
Subir un nuevo gif y verificar que funcione el cambio 

####UNIT TEST #####################3

Dentro de tests.py colocar:

```python
from django.test import TestCase

from App1.forms import CursoFormulario, ProfesorFormulario
import django 
# Import the Django model you want to test
from App1.forms import ProfesorFormulario
import unittest
# Import the Django test framework
from django.test import TestCase

# Write your unit test(s)
from django.test import TestCase

from App1.forms import CursoFormulario, ProfesorFormulario
import django 
# Import the Django model you want to test
from App1.forms import ProfesorFormulario
import unittest
# Import the Django test framework
from django.test import TestCase

# Write your unit test(s)
class ProfesorFormularioTest(TestCase):
    def test_valid_form(self):
        form_data = {'id': 1, 'nombre': 'John', 'apellido': 'Doe', 'email': 'john.doe@example.com', 'profesion': 'Developer'}
        form = ProfesorFormulario(data=form_data)
        print(form)
        #print(self.assertTrue(form.is_valid()))

    def test_invalid_form(self):
        form_data = {'id': 1, 'nombre': 'John', 'apellido': 'Doe', 'email': None, 'profesion': 'Developer'}
        form = ProfesorFormulario(data=form_data)
        print(form)
        #print(self.assertFalse(form.is_valid()))

# Run your unit test(s) with a test runner
if __name__ == '__main__':
    django.setup()
    unittest.main()
```

En el terminal:

python manage.py test -v 3 > test_results.txt
python manage.py test 

Ahora si quieres correr tu estructura especifica:
python manage.py test App1.tests.ProfesorFormularioTest
python manage.py test App1.tests.ProfesorFormularioTest.test_valid_form


python manage.py test -v 1 App1.tests.ProfesorFormularioTest.test_valid_form
python manage.py test -v 3 App1.tests.ProfesorFormularioTest.test_valid_form
python manage.py test App1.tests.ProfesorFormularioTest -v 3 > test_results1.txt


python manage.py test App1 
